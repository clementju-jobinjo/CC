/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.8";  static = false; }PARSER_BEGIN(MiniJavaImpl)package ch.unibe.scg.javacc;

import ch.unibe.scg.minijava.MiniJava;public class MiniJavaImpl implements MiniJava{}PARSER_END(MiniJavaImpl)

// Placeholders so everything compiles. Remove/replace those.
void Goal() :
{ }
{
  MainClass() ( ClassDeclaration() )* < EOF >
}
void ClassDeclaration() :
{ }
{
  "class" Identifier() ( "extends" Identifier() )? "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}
void VarDeclaration() :
{ }
{
  Type() Identifier() ";"
}
void MethodDeclaration() :
{ }
{
  "public" Type() Identifier() "(" (Type() Identifier() ("," Type() Identifier() )* )? ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* (Statement() )* "return" Expression() ";" "}"
}
void Type() :
{ }
{
  LOOKAHEAD(2) "int" "[" "]"
  | "int"
  | "boolean"
  | "void"
  | Identifier()
}
void Statement() :
{ }
{
  "{" ( Statement() )* "}"
  | "if" "(" Expression() ")" Statement() "else" Statement()
  | "while" "(" Expression() ")" Statement()
  | "System.out.println" "(" Expression() ")" ";"
  | LOOKAHEAD(2) Identifier() "=" Expression() ";"
  | Identifier() "[" Expression() "]" "=" Expression() ";"
}
void Expression():
{ }
{
  LOOKAHEAD(2) "new" "int" "[" Expression() "]" ExpPrime()
  | "new" Identifier() "(" ")" ExpPrime()
  | Identifier() ExpPrime()
  | "!" Expression() ExpPrime()
  | "(" Expression() ")" ExpPrime()
  | < INTEGER_LITERAL > ExpPrime()
  | "this" ExpPrime()
  | "true" ExpPrime()
  | "false" ExpPrime()
}
void ExpPrime():
{ }
{
  ( "&&" | "<" | "+" | "-" | "*" | ">" ) Expression() ExpPrime()
  | "[" Expression() "]" ExpPrime()
  | LOOKAHEAD(2) "." "length" ExpPrime()
  | "." Identifier() "(" ( Expression() ( "," Expression() )* )? ")" ExpPrime()
  | Epsilon()
}
void Identifier() :
{ }
{ < IDENTIFIER > }
void MainClass() :
{ }
{ "class" Identifier() "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier() ")" "{" ( Statement() )? "}" "}" }
void Epsilon() :
{ }
{
  { }
}

// End placeholders.

TOKEN : /* INTEGER_LITERAL */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >}

TOKEN : /* IDENTIFIER */
{  < IDENTIFIER: [ "a"-"z", "A"-"Z" ] ( [ "a"-"z", "A"-"Z" ] | [ "0"-"9" ] | "_" )* >
}SKIP :{  " "| "\r"| "\t"| "\n"
| <COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>}