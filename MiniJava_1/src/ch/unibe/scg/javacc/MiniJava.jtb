/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.8";

  static = false; 
}

PARSER_BEGIN(MiniJavaImpl)
package ch.unibe.scg.javacc;

import ch.unibe.scg.minijava.MiniJava;

public class MiniJavaImpl implements MiniJava
{}

PARSER_END(MiniJavaImpl)

// Placeholders so everything compiles. Remove/replace those.
void Goal() :
{ }
{
  MainClass() ( ClassDeclaration() )* < EOF >
}

void ClassDeclaration() :
{ }
{
  "class" Identifier() ( "extends" Identifier() )? "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}

void VarDeclaration() :
{ }
{
  Type() Identifier() ";"
}

void MethodDeclaration() :
{ }
{
  "public" Type() Identifier() < PARENTHESIS_LEFT > (Type() Identifier() (< COMMA > Type() Identifier() )* )? < PARENTHESIS_RIGHT > "{" ( LOOKAHEAD(2) VarDeclaration() )* (Statement() )* "return" Expression() ";" "}"
}

void Type() :
{ }
{
  LOOKAHEAD(2) "int" < BRACKET_LEFT > < BRACKET_RIGHT >
  | "int"
  | "boolean"
  | "void"
  | Identifier()
}

void Statement() :
{ }
{
  BlockStatement()
  | IfStatement()
  | WhileStatement()
  | PrintStatement()
  | AssignmentStatement()
}

void BlockStatement():
{ }
{
  "{" ( Statement() )* "}"
}

void IfStatement():
{ }
{
  "if" < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement() "else" Statement()
}
void WhileStatement():
{ }
{
  "while" < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement()
}

void PrintStatement():
{ }
{
  "System.out.println" < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > ";"
}

void AssignmentStatement():
{ }
{
  Assigned() "=" Expression() ";"
}

void Assigned():
{ }
{
  LOOKAHEAD(2) ArrayAccessIdentifier()
  | Identifier()
}

void ArrayAccessIdentifier():
{ }
{
  Identifier() ArrayAccess()
}

void ArrayAccess():
{ }
{
  < BRACKET_LEFT > Expression() < BRACKET_RIGHT >
}

void Expression():
{ }
{
  NewExpression() ExpPrime()
  | Identifier() ExpPrime()
  | UnaryExpression() ExpPrime()
  | ParenthesisExpression() ExpPrime()
  | IntegerLiteral() ExpPrime()
  | "this" ExpPrime()
  | "true" ExpPrime()
  | "false" ExpPrime()
}

void NewExpression():
{ }
{
  "new" ConstructionCall()
}

void ConstructionCall():
{ }
{
  IntArrayConstructionCall()
 | ObjectConstructionCall()
}

void IntArrayConstructionCall():
{ }
{
  "int" < BRACKET_LEFT > Expression() < BRACKET_RIGHT >
}

void ObjectConstructionCall():
{ }
{
  Identifier() < PARENTHESIS_LEFT > <PARENTHESIS_RIGHT >
}

void UnaryExpression():
{ }
{
  UnaryOperator() Expression()
}

void ParenthesisExpression():
{ }
{
  < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT >
}

void ExpPrime():
{ }
{
  BinaryOperator() Expression() ExpPrime()
  | ArrayCall() ExpPrime()
  | LOOKAHEAD(2) DotArrayLength() ExpPrime()
  | DotFunctionCall() ExpPrime()
  | Epsilon()
}

void ArrayCall():
{ }
{
  < BRACKET_LEFT > Expression() < BRACKET_RIGHT >
}

void DotArrayLength():
{ }
{
  < DOT > "length"
}

void DotFunctionCall():
{ }
{
  < DOT > Identifier() < PARENTHESIS_LEFT > ( Expression() ( < COMMA > Expression() )* )? < PARENTHESIS_RIGHT >
}

void Identifier():
{ }
{ < IDENTIFIER > }

void UnaryOperator():
{ }
{
  < UNOP >
}

void BinaryOperator():
{ }
{
  < BINOP >
}

void IntegerLiteral():
{}
{ < INTEGER_LITERAL > }

void MainClass() :
{ }
{ "class" Identifier() "{" "public" "static" "void" "main" < PARENTHESIS_LEFT > "String" < BRACKET_LEFT > < BRACKET_RIGHT > Identifier() < PARENTHESIS_RIGHT > "{" ( Statement() )? "}" "}" }
void Epsilon() :
{ }
{
  { }
}

// End placeholders.

TOKEN : /* INTEGER_LITERAL */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIER */
{
  < IDENTIFIER: [ "a"-"z", "A"-"Z" ] ( [ "a"-"z", "A"-"Z" ] | [ "0"-"9" ] | "_" )* >
}

TOKEN : /* PUNCTUATION */
{
  < DOT : "." >
  | < COMMA : "," >
}

TOKEN : /* OPERATORS */
{
  < UNOP : "!" >
  | < BINOP :
    (
      "&&"
    | ">"
    | "+"
    | "-"
    | "*"
    | "<"
    | "=="
    ) >
}

TOKEN : /* PARENTHESIS */
{
  < PARENTHESIS_LEFT : "(" >
  | < PARENTHESIS_RIGHT : ")" >
  | < BRACKET_LEFT : "[" >
  | < BRACKET_RIGHT : "]" >
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}